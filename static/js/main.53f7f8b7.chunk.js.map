{"version":3,"sources":["img/bg-masthead.jpg","Navigation.js","serviceWorker.js","Header.js","Services.js","index.js"],"names":["module","exports","Navigation","navlinks","map","section","href","className","this","props","logoTitle","Component","Boolean","window","location","hostname","match","mystyles","Background","Header","style","title","Services","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,yC,2OCwB5BC,G,qLAnBP,IACMC,EADW,CAAC,OAAO,QAAQ,WAAW,YAAY,WAC9BC,KAAI,SAAAC,GAC1B,OACI,gCAAK,uBAAGC,KAAQ,IAAMD,GAAUA,OAGxC,OACI,6BACI,wBAAIE,UAAY,QAAO,uBAAGD,KAAO,KAAKE,KAAKC,MAAMC,YAEjD,4BACKP,Q,GAbIQ,cCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCdAC,G,OAAY,CACd,gBAAkB,OAAlB,OAA0BC,IAA1B,KACA,eAAkB,UAgBPC,E,uKAVP,OACI,4BAAQC,MAAOH,GACX,4BAAKT,KAAKC,MAAMY,OAChB,wEACA,uBAAGf,KAAO,MAAMC,UAAY,OAA5B,mB,GAPKI,aC8BNW,G,8KAlCP,OACI,yBAAKf,UAAY,YACjB,4CACA,6CAEA,yBAAKA,UAAY,OACb,6BACI,8BAAM,uBAAGA,UAAU,uBACnB,0CACA,+DAEJ,6BACA,8BAAM,uBAAGA,UAAU,uBACnB,0CACI,+DAEJ,6BACA,8BAAM,uBAAGA,UAAU,sBACnB,0CACI,+DAEJ,6BACA,8BAAM,uBAAGA,UAAU,qBACnB,0CACI,qE,GA1BGI,cCOjBY,G,8KAEF,OACE,6BACE,kBAAC,EAAD,CAAYb,UAAY,sBACxB,kBAAC,EAAD,CAAQW,MAAQ,sCAChB,kBAAC,EAAD,W,GANUV,cAYlBa,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SH2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53f7f8b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-masthead.c934a8a6.jpg\";","import React, {Component} from 'react';\r\nimport './Navigation.css';\r\n\r\nclass Navigation extends Component{\r\n    render(){\r\n        const sections = [\"Home\",\"About\",\"Services\",\"Portfolio\",\"Contact\"];\r\n        const navlinks = sections.map(section => {\r\n            return (\r\n                <li> <a href = {'#' + section}>{section}</a></li>\r\n            );\r\n        });\r\n        return(\r\n            <nav>\r\n                <h2 className = 'logo'><a href = \"#\">{this.props.logoTitle}</a></h2>\r\n\r\n                <ul>\r\n                    {navlinks}\r\n                </ul>\r\n            </nav>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\r\nimport Background from './img/bg-masthead.jpg';\r\nimport './Header.css';\r\n\r\nconst mystyles  = {\r\n    'backgroundImage': `url(${Background})`,\r\n    'backgroundSize': \"cover\",\r\n};\r\n\r\nclass Header extends Component{\r\n     \r\n    render(){\r\n        return(\r\n            <header style={mystyles}>\r\n                <h1>{this.props.title}</h1>\r\n                <p>I am very happy that I made it on my own.</p>\r\n                <a href = \"#ex\" className = \"btn\">Learn More</a>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './Services.css';\r\n\r\nclass Services extends Component{\r\n    render(){\r\n        return (\r\n            <div className = \"services\">\r\n            <h3>Our Services</h3>\r\n            <h2>What We Offer</h2>    \r\n            \r\n            <div className = \"row\">\r\n                <div>\r\n                    <span><i className=\"fas fa-mobile-alt\"></i></span>\r\n                    <h4>Responsive</h4>\r\n                    <p>Looks great on any screen size!</p>\r\n                </div>\r\n                <div>\r\n                <span><i className=\"fas fa-pencil-alt\"></i></span>\r\n                <h4>Responsive</h4>\r\n                    <p>Looks great on any screen size!</p>\r\n                </div>\r\n                <div>\r\n                <span><i className=\"far fa-thumbs-up\"></i></span>\r\n                <h4>Responsive</h4>\r\n                    <p>Looks great on any screen size!</p>\r\n                </div>\r\n                <div>\r\n                <span><i className=\"fas fa-question\"></i></span>\r\n                <h4>Responsive</h4>\r\n                    <p>Looks great on any screen size!\r\n\r\n</p>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Services;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Navigation from './Navigation';\nimport * as serviceWorker from './serviceWorker';\nimport Header from './Header';\nimport Services from './Services';\nimport { render } from '@testing-library/react';\n\n\nclass App extends Component{\n  render(){\n    return(\n      <div>\n        <Navigation logoTitle = \"Aashi's Portfolio\" />\n        <Header title = \"Welcome to my First React Project\"/>\n        <Services/>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}